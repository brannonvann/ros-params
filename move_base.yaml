# http://wiki.ros.org/move_base

#base_global_planner: "navfn/NavfnROS" For 1.1+ series # Default: "navfn/NavfnROS" For 1.1+ series The name of the plugin for the global planner to use with move_base, see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseGlobalPlanner interface specified in the nav_core package. (1.0 series default: "NavfnROS")
#***common options for base_local_planner: "base_local_planner/TrajectoryPlannerROS", "dwa_local_planner/DWAPlannerROS", "carrot_planner/CarrotPlanner"
base_local_planner: 'dwa_local_planner/DWAPlannerROS' # Default: "base_local_planner/TrajectoryPlannerROS" For 1.1+ series The name of the plugin for the local planner to use with move_base see pluginlib documentation for more details on plugins. This plugin must adhere to the nav_core::BaseLocalPlanner interface specified in the nav_core package. (1.0 series default: "TrajectoryPlannerROS")
#recovery_behaviors: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}] For 1.1+ series # Default: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}] For 1.1+ series A list of recovery behavior plugins to use with move_base, see pluginlib documentation for more details on plugins. These behaviors will be run when move_base fails to find a valid plan in the order that they are specified. After each behavior completes, move_base will attempt to make a plan. If planning is successful, move_base will continue normal operation. Otherwise, the next recovery behavior in the list will be executed. These plugins must adhere to the nav_core::RecoveryBehavior interface specified in the nav_core package. (1.0 series default: [{name: conservative_reset, type: ClearCostmapRecovery}, {name: rotate_recovery, type: RotateRecovery}, {name: aggressive_reset, type: ClearCostmapRecovery}]). Note: For the default parameters, the aggressive_reset behavior will clear out to a distance of 4 * ~/local_costmap/circumscribed_radius.
#controller_frequency: 20.0 # Default: 20.0 The rate in Hz at which to run the control loop and send velocity commands to the base.
#planner_patience: 5.0 # Default: 5.0 How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
#controller_patience: 15.0 # Default: 15.0 How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.
#conservative_reset_dist: 3.0 # Default: 3.0 The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map. Note, this parameter is only used when the default recovery behaviors are used for move_base.
#recovery_behavior_enabled: true # Default: true Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
#clearing_rotation_allowed: true # Default: true Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom.
#shutdown_costmaps: false # Default: false Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state
#oscillation_timeout: 0.0 # Default: 0.0 How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout. New in navigation 1.3.1
#oscillation_distance: 0.5 # Default: 0.5 How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout New in navigation 1.3.1
#planner_frequency: 0.0 # Default: 0.0 The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked. New in navigation 1.6.0
#max_planning_retries: -1 # Default: -1 How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.

DWAPlannerROS:
  _: this is here to maintain format
  ### Robot Configuration Parameters

  #acc_lim_x: 2.5 # Default: 2.5 The x acceleration limit of the robot in meters/sec^2
  #acc_lim_y: 2.5 # Default: 2.5 The y acceleration limit of the robot in meters/sec^2
  #acc_lim_th: 3.2 # Default: 3.2 The rotational acceleration limit of the robot in radians/sec^2
  #max_vel_trans: 0.55 # Default: 0.55 The absolute value of the maximum translational velocity for the robot in m/s
  #min_vel_trans: 0.1 # Default: 0.1 The absolute value of the minimum translational velocity for the robot in m/s
  #max_vel_x: 0.55 # Default: 0.55 The maximum x velocity for the robot in m/s.
  #min_vel_x: 0.0 # Default: 0.0 The minimum x velocity for the robot in m/s, negative for backwards motion.
  max_vel_y: 0.0 # Default: 0.1 The maximum y velocity for the robot in m/s
  min_vel_y: 0.0 # Default: -0.1 The minimum y velocity for the robot in m/s
  #max_rot_vel: 1.0 # Default: 1.0 The absolute value of the maximum rotational velocity for the robot in rad/s
  #min_rot_vel: 0.4 # Default: 0.4 The absolute value of the minimum rotational velocity for the robot in rad/s

  ### Goal Tolerance Parameters:
  #yaw_goal_tolerance: 0.05 # Default: 0.05 The tolerance in radians for the controller in yaw/rotation when achieving its goal
  #xy_goal_tolerance: 0.10 # Default: 0.10 The tolerance in meters for the controller in the x & y distance when achieving a goal
  #latch_xy_goal_tolerance: false # Default: false If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

  ### Forward Simulation Parameters
  sim_time: 4.0 # Default: 1.7 The amount of time to forward-simulate trajectories in seconds
  #sim_granularity: 0.025 # Default: 0.025 The step size, in meters, to take between points on a given trajectory
  vx_samples: 20 # Default: 3 The number of samples to use when exploring the x velocity space
  vy_samples: 0 # Default: 10 The number of samples to use when exploring the y velocity space
  vth_samples: 40 # Default: 20 The number of samples to use when exploring the theta velocity space
  #controller_frequency: 20.0 # Default: 20.0 The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset.

  ### Trajectory Scoring Parameters
  # The cost function used to score each trajectory is in the following form:
  # cost =
  # path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
  # + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
  # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  #path_distance_bias: 32.0 # Default: 32.0 The weighting for how much the controller should stay close to the path it was given
  #goal_distance_bias: 24.0 # Default: 24.0 The weighting for how much the controller should attempt to reach its local goal, also controls speed
  #occdist_scale: 0.01 # Default: 0.01 The weighting for how much the controller should attempt to avoid obstacles
  #forward_point_distance: 0.325 # Default: 0.325 The distance from the center point of the robot to place an additional scoring point, in meters
  #stop_time_buffer: 0.2 # Default: 0.2 The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  #scaling_speed: 0.25 # Default: 0.25 The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  #max_scaling_factor: 0.2 # Default: 0.2 The maximum factor to scale the robot's footprint by
  #publish_cost_grid: false # Default: false Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the #cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.

  ### Oscillation Prevention Parameters
  #oscillation_reset_dist: 0.05 # Default: 0.05 How far the robot must travel in meters before oscillation flags are reset

  ### Global Plan Parameters
  #prune_plan: true # Default: true Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.

TrajectoryPlannerROS:
  _: this is here to maintain format
  # This is the default local planner for ROS

  ### Robot Configuration Parameters
  #acc_lim_x: 2.5 # Default: 2.5 The x acceleration limit of the robot in meters/sec^2
  #acc_lim_y: 2.5 # Default: 2.5 The y acceleration limit of the robot in meters/sec^2
  #acc_lim_theta: 3.2 # Default: 3.2 The rotational acceleration limit of the robot in radians/sec^2
  #max_vel_x: 0.5 # Default: 0.5 The maximum forward velocity allowed for the base in meters/sec
  #min_vel_x: 0.1 # Default: 0.1 The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.
  #max_vel_theta: 1.0 # Default: 1.0 The maximum rotational velocity allowed for the base in radians/sec
  #min_vel_theta: -1.0 # Default: -1.0 The minimum rotational velocity allowed for the base in radians/sec
  #min_in_place_vel_theta: 0.4 # Default: 0.4 The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
  #backup_vel: -0.1 # Default: -0.1 DEPRECATED (use escape_vel):Speed used for backing up during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
  #escape_vel: -0.1 # Default: -0.1 Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape. New in navigation 1.3.1
  holonomic_robot: false # Default: true Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued.
  #y_vels: [-0.3, -0.1, 0.1, 0.3] #  Default: [-0.3, -0.1, 0.1, 0.3] Used if holonomic_robot is set to true. The strafing velocities that a holonomic robot will consider in meters/sec

  ### Goal Tolerance Parameters
  #yaw_goal_tolerance: 0.05 # Default: 0.05 The tolerance in radians for the controller in yaw/rotation when achieving its goal
  #xy_goal_tolerance: 0.10 # Default: 0.10 The tolerance in meters for the controller in the x & y distance when achieving a goal
  #latch_xy_goal_tolerance: false # Default: false If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. - New in navigation 1.3.1

  ### Forward Simulation Parameters
  #sim_time: 1.0 # Default: 1.0 The amount of time to forward-simulate trajectories in seconds
  #sim_granularity: 0.025 # Default: 0.025 The step size, in meters, to take between points on a given trajectory
  #angular_sim_granularity: #sim_granularity # Default: #sim_granularity The step size, in radians, to take between angular samples on a given trajectory. - New in navigation 1.3.1
  #vx_samples: 3 # Default: 3 The number of samples to use when exploring the x velocity space
  #vtheta_samples: 20 # Default: 20 The number of samples to use when exploring the theta velocity space
  #controller_frequency: 20.0 # Default: 20.0 The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset. - New in navigation 1.3.1

  ### Trajectory Scoring Parameters:
  #The cost function used to score each trajectory is in the following form:
  # cost =
  # pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
  # + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
  # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  #meter_scoring: false # Default: false Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. New in navigation 1.3.1
  #pdist_scale: 0.6 # Default: 0.6 The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  #gdist_scale: 0.8 # Default: 0.8 The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  #occdist_scale: 0.01 # Default: 0.01 The weighting for how much the controller should attempt to avoid obstacles
  #heading_lookahead: 0.325 # Default: 0.325 How far to look ahead in meters when scoring different in-place-rotation trajectories
  #heading_scoring: false # Default: false Whether to score based on the robot's heading to the path or its distance from the path
  #heading_scoring_timestep: 0.8 # Default: 0.8 How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  #dwa: true # Default: true Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.)
  #publish_cost_grid_pc: false # Default: false Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the #cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. New in navigation 1.4.0
  #global_frame_id: odom # Default: odom The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame. New in navigation 1.4.0

  ### Oscillation Prevention Parameters
  #oscillation_reset_dist: 0.05 # Default: 0.05 How far the robot must travel in meters before oscillation flags are reset

  ### Global Plan Parameters
  #prune_plan: true # Default: true Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
